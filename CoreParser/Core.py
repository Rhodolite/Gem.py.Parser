#
#   Copyright (c) 2017-2018 Joy Diamond.  All rights reserved.
#
@module('CoreParser.Core')
def module():
    transport('Capital.Cache2',                     'create_cache')
    transport('Capital.Cache2',                     'produce_conjure_unique_dual')
    transport('Capital.Cache2',                     'produce_conjure_unique_triple')
    transport('Capital.Cache2',                     'produce_conjure_unique_triple__312')
    transport('Capital.Cache',                      'produce_conjure_dual')
    transport('Capital.Cache',                      'produce_conjure_dual__21')
    transport('Capital.Cache',                      'produce_conjure_triple')
    transport('Capital.Cache',                      'produce_conjure_tuple')
    transport('Capital.Cadence',                    'cadence_constructing')
    transport('Capital.Cadence',                    'cadence_entered')
    transport('Capital.Cadence',                    'cadence_exception')
    transport('Capital.Cadence',                    'cadence_exited')
    transport('Capital.Cadence',                    'cadence_initialized')
    transport('Capital.Cadence',                    'cadence_reuse')
    transport('Capital.Core',                       'arrange')
    transport('Capital.Core',                       'attribute')
    transport('Capital.Core',                       'Boolean')
    transport('Capital.Core',                       'false')
    transport('Capital.Core',                       'Integer')
    transport('Capital.Core',                       'intern_arrange')
    transport('Capital.Core',                       'intern_string')
    transport('Capital.Core',                       'iterate')
    transport('Capital.Core',                       'length')
    transport('Capital.Core',                       'line')
    transport('Capital.Core',                       'List')
    transport('Capital.Core',                       'Map')
    transport('Capital.Core',                       'Method')
    transport('Capital.Core',                       'method_is_function')
    transport('Capital.Core',                       'next_method')
    transport('Capital.Core',                       'none')
    transport('Capital.Core',                       'Object')
    transport('Capital.Core',                       'partial')
    transport('Capital.Core',                       'portray')
    transport('Capital.Core',                       'property')
    transport('Capital.Core',                       'python_debug_mode')
    transport('Capital.Core',                       'raising_exception')
    transport('Capital.Core',                       'rename')
    transport('Capital.Core',                       'rename_function')
    transport('Capital.Core',                       'static_method')
    transport('Capital.Core',                       'String')
    transport('Capital.Core',                       'sum')
    transport('Capital.Core',                       'true')
    transport('Capital.Core',                       'Tuple')
    transport('Capital.Core',                       'type')
    transport('Capital.Core',                       'Type')
    transport('Capital.DelayedFileOutput',          'create_DelayedFileOutput')
    transport('Capital.Exception',                  'Exception')
    transport('Capital.Exception',                  'exit_clause')
    transport('Capital.Exception',                  'raise_runtime_error')
    transport('Capital.GeneratedConjureQuadruple',  'produce_conjure_quadruple__4123')
    transport('Capital.Global',                     'capital_global')
    transport('Capital.Map',                        'iterate_items_sorted_by_key')
    transport('Capital.Map',                        'iterate_values_sorted_by_key')
    transport('Capital.Method',                     'return_self')
    transport('Capital.Path',                       'path_basename')
    transport('Capital.PortrayString',              'portray_string')
    transport('Capital.SimpleStringIO',             'create_SimpleStringOutput')
    transport('Capital.StringOutput',               'create_StringOutput')
    transport('Capital.StringOutput',               'StringOutput')
    transport('Capital.System',                     'caller_frame_1')
    transport('Capital.System',                     'slice_all')
